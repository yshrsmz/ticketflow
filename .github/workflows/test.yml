name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: make test

    - name: Run integration tests
      run: make test-integration

    - name: Check code formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files need formatting:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: make vet

    - name: Generate coverage report
      if: github.event_name == 'pull_request'
      run: |
        go test -coverprofile=coverage.out -covermode=atomic ./...
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        
        # Generate detailed coverage by package
        echo "COVERAGE_DETAILS<<EOF" >> $GITHUB_ENV
        go tool cover -func=coverage.out | grep -v "total:" | while IFS=$'\t' read -r file func coverage; do
          if [[ -n "$coverage" ]]; then
            printf "| %-80s %-20s | %7s |\n" "$file" "$func" "$coverage"
          fi
        done | sort >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Post coverage comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = process.env.COVERAGE;
          const details = process.env.COVERAGE_DETAILS;
          
          // Determine coverage emoji and color
          const coverageFloat = parseFloat(coverage);
          let emoji = 'üî¥';
          let color = 'red';
          if (coverageFloat >= 80) {
            emoji = 'üü¢';
            color = 'green';
          } else if (coverageFloat >= 60) {
            emoji = 'üü°';
            color = 'yellow';
          }
          
          const comment = `## ${emoji} Test Coverage Report
          
          **Total Coverage:** **${coverage}**
          
          <details>
          <summary>Coverage by Package</summary>
          
          | Package | Coverage |
          |---------|----------|
          ${details}
          
          </details>
          
          ---
          <sub>Coverage generated by ticketflow CI</sub>`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Test Coverage Report')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest

  benchmark:
    name: Benchmark Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    continue-on-error: true  # Don't fail the PR if benchmarks show regressions
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Check for baseline
      id: baseline-check
      run: |
        if [ -f benchmarks/baseline.txt ]; then
          echo "has-baseline=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Baseline found, will run benchmark comparison"
        else
          echo "has-baseline=false" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è No baseline found, skipping benchmark comparison"
        fi
        
    - name: Run quick benchmark comparison
      if: steps.baseline-check.outputs.has-baseline == 'true'
      run: |
        echo "üöÄ Running quick benchmark regression check..."
        echo "This uses BENCH_TIME=100ms for fast feedback (~30s)"
        echo ""
        
        # Run quick benchmarks for core packages only
        if BENCH_TIME=100ms bash benchmarks/compare-with-baseline.sh; then
          echo ""
          echo "‚úÖ No significant performance regressions detected"
        else
          echo ""
          echo "‚ö†Ô∏è Potential performance regressions detected"
          echo "This is informational only and won't block merging."
          echo "For detailed analysis, run 'make bench-compare' locally."
        fi
        
    - name: Upload benchmark results
      if: steps.baseline-check.outputs.has-baseline == 'true' && always()
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmarks/current.txt
        retention-days: 7
