#!/bin/bash

# Pre-commit hook for ticketflow project
# Runs formatting and linting checks on staged files

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
VERBOSE=${HOOKS_VERBOSE:-0}

# Helper functions
print_info() {
    echo -e "${BLUE}[pre-commit]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[pre-commit]${NC} ✓ $1"
}

print_warning() {
    echo -e "${YELLOW}[pre-commit]${NC} ⚠ $1"
}

print_error() {
    echo -e "${RED}[pre-commit]${NC} ✗ $1"
}

debug() {
    if [[ "$VERBOSE" == "1" ]]; then
        echo -e "${BLUE}[pre-commit][DEBUG]${NC} $1"
    fi
}

# Check if we should skip hooks
if [[ "${SKIP_HOOKS}" == "1" ]] || [[ "${NO_VERIFY}" == "1" ]]; then
    print_warning "Skipping pre-commit hooks (SKIP_HOOKS or NO_VERIFY set)"
    exit 0
fi

# Skip hooks in CI environment
if [[ "${CI}" == "true" ]] || [[ -n "${GITHUB_ACTIONS}" ]]; then
    print_info "CI environment detected, skipping hooks"
    exit 0
fi

# Skip during merge/rebase operations
if [[ -f .git/MERGE_HEAD ]] || [[ -f .git/REBASE_HEAD ]] || [[ -f .git/rebase-merge/interactive ]]; then
    print_info "Merge/rebase in progress, skipping hooks"
    exit 0
fi

# Get list of staged Go files
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)

if [[ -z "$STAGED_GO_FILES" ]]; then
    debug "No Go files staged, skipping checks"
    exit 0
fi

print_info "Running pre-commit checks..."

# Count files for progress
FILE_COUNT=$(echo "$STAGED_GO_FILES" | wc -w)
print_info "Checking $FILE_COUNT Go file(s)"

# 1. Run gofmt
print_info "Running gofmt..."
UNFORMATTED_FILES=""
for FILE in $STAGED_GO_FILES; do
    if [[ -f "$FILE" ]]; then
        debug "Checking format: $FILE"
        if ! gofmt -l "$FILE" | grep -q .; then
            : # File is formatted
        else
            UNFORMATTED_FILES="$UNFORMATTED_FILES $FILE"
            # Auto-format the file
            gofmt -w "$FILE"
            git add "$FILE"
        fi
    fi
done

if [[ -n "$UNFORMATTED_FILES" ]]; then
    print_warning "Formatted files (auto-staged):$UNFORMATTED_FILES"
else
    print_success "All files properly formatted"
fi

# 2. Run go vet using make
print_info "Running go vet..."
if make vet 2>&1; then
    print_success "go vet passed"
else
    print_error "go vet found issues"
    exit 1
fi

# 3. Run golangci-lint (fast mode)
if command -v golangci-lint >/dev/null 2>&1; then
    print_info "Running golangci-lint (fast mode)..."

    # Create a temporary file list for golangci-lint
    TEMP_FILE_LIST=$(mktemp)
    echo "$STAGED_GO_FILES" | tr ' ' '\n' > "$TEMP_FILE_LIST"

    if golangci-lint run --fast-only --new-from-rev=HEAD 2>&1; then
        print_success "golangci-lint passed"
    else
        print_error "golangci-lint found issues"
        rm -f "$TEMP_FILE_LIST"
        exit 1
    fi

    rm -f "$TEMP_FILE_LIST"
else
    print_warning "golangci-lint not installed, skipping"
fi

print_success "Pre-commit checks completed successfully"
exit 0